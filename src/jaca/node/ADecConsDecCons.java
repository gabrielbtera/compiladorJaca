/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.node;

import java.util.*;
import jaca.analysis.*;

@SuppressWarnings("nls")
public final class ADecConsDecCons extends PDecCons
{
    private TConstante _constante_;
    private PTipoPrimitivo _esq_;
    private final LinkedList<PListaInicializacao> _dir_ = new LinkedList<PListaInicializacao>();
    private TPontoEVirgula _pontoEVirgula_;

    public ADecConsDecCons()
    {
        // Constructor
    }

    public ADecConsDecCons(
        @SuppressWarnings("hiding") TConstante _constante_,
        @SuppressWarnings("hiding") PTipoPrimitivo _esq_,
        @SuppressWarnings("hiding") List<?> _dir_,
        @SuppressWarnings("hiding") TPontoEVirgula _pontoEVirgula_)
    {
        // Constructor
        setConstante(_constante_);

        setEsq(_esq_);

        setDir(_dir_);

        setPontoEVirgula(_pontoEVirgula_);

    }

    @Override
    public Object clone()
    {
        return new ADecConsDecCons(
            cloneNode(this._constante_),
            cloneNode(this._esq_),
            cloneList(this._dir_),
            cloneNode(this._pontoEVirgula_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADecConsDecCons(this);
    }

    public TConstante getConstante()
    {
        return this._constante_;
    }

    public void setConstante(TConstante node)
    {
        if(this._constante_ != null)
        {
            this._constante_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._constante_ = node;
    }

    public PTipoPrimitivo getEsq()
    {
        return this._esq_;
    }

    public void setEsq(PTipoPrimitivo node)
    {
        if(this._esq_ != null)
        {
            this._esq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._esq_ = node;
    }

    public LinkedList<PListaInicializacao> getDir()
    {
        return this._dir_;
    }

    public void setDir(List<?> list)
    {
        for(PListaInicializacao e : this._dir_)
        {
            e.parent(null);
        }
        this._dir_.clear();

        for(Object obj_e : list)
        {
            PListaInicializacao e = (PListaInicializacao) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._dir_.add(e);
        }
    }

    public TPontoEVirgula getPontoEVirgula()
    {
        return this._pontoEVirgula_;
    }

    public void setPontoEVirgula(TPontoEVirgula node)
    {
        if(this._pontoEVirgula_ != null)
        {
            this._pontoEVirgula_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pontoEVirgula_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._constante_)
            + toString(this._esq_)
            + toString(this._dir_)
            + toString(this._pontoEVirgula_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._constante_ == child)
        {
            this._constante_ = null;
            return;
        }

        if(this._esq_ == child)
        {
            this._esq_ = null;
            return;
        }

        if(this._dir_.remove(child))
        {
            return;
        }

        if(this._pontoEVirgula_ == child)
        {
            this._pontoEVirgula_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._constante_ == oldChild)
        {
            setConstante((TConstante) newChild);
            return;
        }

        if(this._esq_ == oldChild)
        {
            setEsq((PTipoPrimitivo) newChild);
            return;
        }

        for(ListIterator<PListaInicializacao> i = this._dir_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PListaInicializacao) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._pontoEVirgula_ == oldChild)
        {
            setPontoEVirgula((TPontoEVirgula) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
