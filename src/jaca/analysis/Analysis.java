/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.analysis;

import jaca.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAPrograma(APrograma node);
    void caseAListaClasseListaClasse(AListaClasseListaClasse node);
    void caseAClasseListaClasse(AClasseListaClasse node);
    void caseAFamiliaFamilia(AFamiliaFamilia node);
    void caseAListaRelacaoListaRelacao(AListaRelacaoListaRelacao node);
    void caseARelacaoListaRelacao(ARelacaoListaRelacao node);
    void caseARelacaoRelacao(ARelacaoRelacao node);
    void caseAFilhaRelacaoFilhaRelacao(AFilhaRelacaoFilhaRelacao node);
    void caseADefClasseDefClasse(ADefClasseDefClasse node);
    void caseAAtributosAtributos(AAtributosAtributos node);
    void caseADecAtributos(ADecAtributos node);
    void caseAMetodosMetodos(AMetodosMetodos node);
    void caseADecMetodos(ADecMetodos node);
    void caseAObjDec(AObjDec node);
    void caseAVarDec(AVarDec node);
    void caseAConsDec(AConsDec node);
    void caseAListaDecListaDecs(AListaDecListaDecs node);
    void caseADecListaDecs(ADecListaDecs node);
    void caseAListaDecConsListaDecCons(AListaDecConsListaDecCons node);
    void caseADecConsListaDecCons(ADecConsListaDecCons node);
    void caseADecObjDecObj(ADecObjDecObj node);
    void caseADecVarDecVar(ADecVarDecVar node);
    void caseADecConsDecCons(ADecConsDecCons node);
    void caseAListaIdListaId(AListaIdListaId node);
    void caseAIdListaId(AIdListaId node);
    void caseAListaInicializacaoListaInicializacao(AListaInicializacaoListaInicializacao node);
    void caseAInicializacaoListaInicializacao(AInicializacaoListaInicializacao node);
    void caseAPinicializacaoPinicializacao(APinicializacaoPinicializacao node);
    void caseAIdClassPidClass(AIdClassPidClass node);
    void caseAProcDec2(AProcDec2 node);
    void caseAFuncDec2(AFuncDec2 node);
    void caseADecProcedimentoDecProcedimento(ADecProcedimentoDecProcedimento node);
    void caseADecFuncaoDecFuncao(ADecFuncaoDecFuncao node);
    void caseAListaParametroListaParametro(AListaParametroListaParametro node);
    void caseAParametroListaParametro(AParametroListaParametro node);
    void caseAParametroParametro(AParametroParametro node);
    void caseAClasseTipo(AClasseTipo node);
    void caseAPrimitivoTipo(APrimitivoTipo node);
    void caseATipoClasseTipoClasse(ATipoClasseTipoClasse node);
    void caseABoolTipoPrimitivo(ABoolTipoPrimitivo node);
    void caseARealTipoPrimitivo(ARealTipoPrimitivo node);
    void caseACondComando(ACondComando node);
    void caseACondElseComando(ACondElseComando node);
    void caseALoopComando(ALoopComando node);
    void caseAAtribComando(AAtribComando node);
    void caseACallComando(ACallComando node);
    void caseABlocoComando(ABlocoComando node);
    void caseACondComandoElse(ACondComandoElse node);
    void caseALoopComandoElse(ALoopComandoElse node);
    void caseAAtribComandoElse(AAtribComandoElse node);
    void caseACallComandoElse(ACallComandoElse node);
    void caseABlocoComandoElse(ABlocoComandoElse node);
    void caseAContCondContComandoElse(AContCondContComandoElse node);
    void caseAListaComandosListaComandos(AListaComandosListaComandos node);
    void caseAComandoListaComandos(AComandoListaComandos node);
    void caseABlocoBloco(ABlocoBloco node);
    void caseATermoExp(ATermoExp node);
    void caseAAtributoExp(AAtributoExp node);
    void caseANegativoExp(ANegativoExp node);
    void caseASomaExp(ASomaExp node);
    void caseASubtExp(ASubtExp node);
    void caseAMultiExp(AMultiExp node);
    void caseADivExp(ADivExp node);
    void caseAModExp(AModExp node);
    void caseAIgualExp(AIgualExp node);
    void caseAMenorExp(AMenorExp node);
    void caseAMenorigExp(AMenorigExp node);
    void caseANegacExp(ANegacExp node);
    void caseAAndExp(AAndExp node);
    void caseAOrExp(AOrExp node);
    void caseABlocoExpExp(ABlocoExpExp node);
    void caseANumeroTermo(ANumeroTermo node);
    void caseAVerdadeTermo(AVerdadeTermo node);
    void caseAFalsoTermo(AFalsoTermo node);
    void caseAIdTermo(AIdTermo node);
    void caseAParentesesTermo(AParentesesTermo node);
    void caseAChamadaTermo(AChamadaTermo node);
    void caseAAtributoAtributo(AAtributoAtributo node);
    void caseAIdPontoIdPonto(AIdPontoIdPonto node);
    void caseABlocoExpBlocoExp(ABlocoExpBlocoExp node);
    void caseAChamadaChamada(AChamadaChamada node);

    void caseTFuncao(TFuncao node);
    void caseTOperadorRelacao(TOperadorRelacao node);
    void caseTPontoEVirgula(TPontoEVirgula node);
    void caseTReal(TReal node);
    void caseTBoleano(TBoleano node);
    void caseTVerdade(TVerdade node);
    void caseTFalso(TFalso node);
    void caseTSoma(TSoma node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTIgual(TIgual node);
    void caseTMenorQ(TMenorQ node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTNegacao(TNegacao node);
    void caseTParentesesEsquerdo(TParentesesEsquerdo node);
    void caseTParentesesDireito(TParentesesDireito node);
    void caseTInicializacao(TInicializacao node);
    void caseTVirgula(TVirgula node);
    void caseTClasse(TClasse node);
    void caseTObjeto(TObjeto node);
    void caseTVariavel(TVariavel node);
    void caseTConstante(TConstante node);
    void caseTProcedimento(TProcedimento node);
    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTSe(TSe node);
    void caseTSenao(TSenao node);
    void caseTEnquanto(TEnquanto node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTPonto(TPonto node);
    void caseTFilhaDaClasse(TFilhaDaClasse node);
    void caseTPontoDeEntrada(TPontoDeEntrada node);
    void caseTComentario(TComentario node);
    void caseTIdClass(TIdClass node);
    void caseTIdentificador(TIdentificador node);
    void caseTNumero(TNumero node);
    void caseTVazio(TVazio node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
