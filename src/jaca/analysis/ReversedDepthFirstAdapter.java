/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.analysis;

import java.util.*;
import jaca.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAPrograma(node);
    }

    public void inAListaClasseListaClasse(AListaClasseListaClasse node)
    {
        defaultIn(node);
    }

    public void outAListaClasseListaClasse(AListaClasseListaClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaClasseListaClasse(AListaClasseListaClasse node)
    {
        inAListaClasseListaClasse(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAListaClasseListaClasse(node);
    }

    public void inAClasseListaClasse(AClasseListaClasse node)
    {
        defaultIn(node);
    }

    public void outAClasseListaClasse(AClasseListaClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClasseListaClasse(AClasseListaClasse node)
    {
        inAClasseListaClasse(node);
        if(node.getDefClasse() != null)
        {
            node.getDefClasse().apply(this);
        }
        outAClasseListaClasse(node);
    }

    public void inAFamiliaFamilia(AFamiliaFamilia node)
    {
        defaultIn(node);
    }

    public void outAFamiliaFamilia(AFamiliaFamilia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFamiliaFamilia(AFamiliaFamilia node)
    {
        inAFamiliaFamilia(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getListaRelacao() != null)
        {
            node.getListaRelacao().apply(this);
        }
        outAFamiliaFamilia(node);
    }

    public void inAListaRelacaoListaRelacao(AListaRelacaoListaRelacao node)
    {
        defaultIn(node);
    }

    public void outAListaRelacaoListaRelacao(AListaRelacaoListaRelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaRelacaoListaRelacao(AListaRelacaoListaRelacao node)
    {
        inAListaRelacaoListaRelacao(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getOperadorRelacao() != null)
        {
            node.getOperadorRelacao().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAListaRelacaoListaRelacao(node);
    }

    public void inARelacaoListaRelacao(ARelacaoListaRelacao node)
    {
        defaultIn(node);
    }

    public void outARelacaoListaRelacao(ARelacaoListaRelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacaoListaRelacao(ARelacaoListaRelacao node)
    {
        inARelacaoListaRelacao(node);
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        outARelacaoListaRelacao(node);
    }

    public void inARelacaoRelacao(ARelacaoRelacao node)
    {
        defaultIn(node);
    }

    public void outARelacaoRelacao(ARelacaoRelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacaoRelacao(ARelacaoRelacao node)
    {
        inARelacaoRelacao(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getClasse() != null)
        {
            node.getClasse().apply(this);
        }
        outARelacaoRelacao(node);
    }

    public void inAFilhaRelacaoFilhaRelacao(AFilhaRelacaoFilhaRelacao node)
    {
        defaultIn(node);
    }

    public void outAFilhaRelacaoFilhaRelacao(AFilhaRelacaoFilhaRelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilhaRelacaoFilhaRelacao(AFilhaRelacaoFilhaRelacao node)
    {
        inAFilhaRelacaoFilhaRelacao(node);
        if(node.getPidClass() != null)
        {
            node.getPidClass().apply(this);
        }
        if(node.getFilhaDaClasse() != null)
        {
            node.getFilhaDaClasse().apply(this);
        }
        outAFilhaRelacaoFilhaRelacao(node);
    }

    public void inADefClasseDefClasse(ADefClasseDefClasse node)
    {
        defaultIn(node);
    }

    public void outADefClasseDefClasse(ADefClasseDefClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefClasseDefClasse(ADefClasseDefClasse node)
    {
        inADefClasseDefClasse(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        if(node.getClasse() != null)
        {
            node.getClasse().apply(this);
        }
        outADefClasseDefClasse(node);
    }

    public void inAAtributosAtributos(AAtributosAtributos node)
    {
        defaultIn(node);
    }

    public void outAAtributosAtributos(AAtributosAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributosAtributos(AAtributosAtributos node)
    {
        inAAtributosAtributos(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAtributosAtributos(node);
    }

    public void inADecAtributos(ADecAtributos node)
    {
        defaultIn(node);
    }

    public void outADecAtributos(ADecAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecAtributos(ADecAtributos node)
    {
        inADecAtributos(node);
        if(node.getDec() != null)
        {
            node.getDec().apply(this);
        }
        outADecAtributos(node);
    }

    public void inAMetodosMetodos(AMetodosMetodos node)
    {
        defaultIn(node);
    }

    public void outAMetodosMetodos(AMetodosMetodos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMetodosMetodos(AMetodosMetodos node)
    {
        inAMetodosMetodos(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAMetodosMetodos(node);
    }

    public void inADecMetodos(ADecMetodos node)
    {
        defaultIn(node);
    }

    public void outADecMetodos(ADecMetodos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecMetodos(ADecMetodos node)
    {
        inADecMetodos(node);
        if(node.getDec2() != null)
        {
            node.getDec2().apply(this);
        }
        outADecMetodos(node);
    }

    public void inAObjDec(AObjDec node)
    {
        defaultIn(node);
    }

    public void outAObjDec(AObjDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjDec(AObjDec node)
    {
        inAObjDec(node);
        if(node.getDecObj() != null)
        {
            node.getDecObj().apply(this);
        }
        outAObjDec(node);
    }

    public void inAVarDec(AVarDec node)
    {
        defaultIn(node);
    }

    public void outAVarDec(AVarDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDec(AVarDec node)
    {
        inAVarDec(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outAVarDec(node);
    }

    public void inAConsDec(AConsDec node)
    {
        defaultIn(node);
    }

    public void outAConsDec(AConsDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConsDec(AConsDec node)
    {
        inAConsDec(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outAConsDec(node);
    }

    public void inAListaDecListaDecs(AListaDecListaDecs node)
    {
        defaultIn(node);
    }

    public void outAListaDecListaDecs(AListaDecListaDecs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaDecListaDecs(AListaDecListaDecs node)
    {
        inAListaDecListaDecs(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAListaDecListaDecs(node);
    }

    public void inADecListaDecs(ADecListaDecs node)
    {
        defaultIn(node);
    }

    public void outADecListaDecs(ADecListaDecs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecListaDecs(ADecListaDecs node)
    {
        inADecListaDecs(node);
        if(node.getDec() != null)
        {
            node.getDec().apply(this);
        }
        outADecListaDecs(node);
    }

    public void inAListaDecConsListaDecCons(AListaDecConsListaDecCons node)
    {
        defaultIn(node);
    }

    public void outAListaDecConsListaDecCons(AListaDecConsListaDecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaDecConsListaDecCons(AListaDecConsListaDecCons node)
    {
        inAListaDecConsListaDecCons(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAListaDecConsListaDecCons(node);
    }

    public void inADecConsListaDecCons(ADecConsListaDecCons node)
    {
        defaultIn(node);
    }

    public void outADecConsListaDecCons(ADecConsListaDecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsListaDecCons(ADecConsListaDecCons node)
    {
        inADecConsListaDecCons(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outADecConsListaDecCons(node);
    }

    public void inADecObjDecObj(ADecObjDecObj node)
    {
        defaultIn(node);
    }

    public void outADecObjDecObj(ADecObjDecObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjDecObj(ADecObjDecObj node)
    {
        inADecObjDecObj(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getObjeto() != null)
        {
            node.getObjeto().apply(this);
        }
        outADecObjDecObj(node);
    }

    public void inADecVarDecVar(ADecVarDecVar node)
    {
        defaultIn(node);
    }

    public void outADecVarDecVar(ADecVarDecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarDecVar(ADecVarDecVar node)
    {
        inADecVarDecVar(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outADecVarDecVar(node);
    }

    public void inADecConsDecCons(ADecConsDecCons node)
    {
        defaultIn(node);
    }

    public void outADecConsDecCons(ADecConsDecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsDecCons(ADecConsDecCons node)
    {
        inADecConsDecCons(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        {
            List<PListaInicializacao> copy = new ArrayList<PListaInicializacao>(node.getDir());
            Collections.reverse(copy);
            for(PListaInicializacao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        outADecConsDecCons(node);
    }

    public void inAListaIdListaId(AListaIdListaId node)
    {
        defaultIn(node);
    }

    public void outAListaIdListaId(AListaIdListaId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaIdListaId(AListaIdListaId node)
    {
        inAListaIdListaId(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAListaIdListaId(node);
    }

    public void inAIdListaId(AIdListaId node)
    {
        defaultIn(node);
    }

    public void outAIdListaId(AIdListaId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdListaId(AIdListaId node)
    {
        inAIdListaId(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdListaId(node);
    }

    public void inAListaInicializacaoListaInicializacao(AListaInicializacaoListaInicializacao node)
    {
        defaultIn(node);
    }

    public void outAListaInicializacaoListaInicializacao(AListaInicializacaoListaInicializacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaInicializacaoListaInicializacao(AListaInicializacaoListaInicializacao node)
    {
        inAListaInicializacaoListaInicializacao(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAListaInicializacaoListaInicializacao(node);
    }

    public void inAInicializacaoListaInicializacao(AInicializacaoListaInicializacao node)
    {
        defaultIn(node);
    }

    public void outAInicializacaoListaInicializacao(AInicializacaoListaInicializacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInicializacaoListaInicializacao(AInicializacaoListaInicializacao node)
    {
        inAInicializacaoListaInicializacao(node);
        if(node.getPinicializacao() != null)
        {
            node.getPinicializacao().apply(this);
        }
        outAInicializacaoListaInicializacao(node);
    }

    public void inAPinicializacaoPinicializacao(APinicializacaoPinicializacao node)
    {
        defaultIn(node);
    }

    public void outAPinicializacaoPinicializacao(APinicializacaoPinicializacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPinicializacaoPinicializacao(APinicializacaoPinicializacao node)
    {
        inAPinicializacaoPinicializacao(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAPinicializacaoPinicializacao(node);
    }

    public void inAIdClassPidClass(AIdClassPidClass node)
    {
        defaultIn(node);
    }

    public void outAIdClassPidClass(AIdClassPidClass node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdClassPidClass(AIdClassPidClass node)
    {
        inAIdClassPidClass(node);
        if(node.getIdClass() != null)
        {
            node.getIdClass().apply(this);
        }
        outAIdClassPidClass(node);
    }

    public void inAProcDec2(AProcDec2 node)
    {
        defaultIn(node);
    }

    public void outAProcDec2(AProcDec2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcDec2(AProcDec2 node)
    {
        inAProcDec2(node);
        if(node.getDecProcedimento() != null)
        {
            node.getDecProcedimento().apply(this);
        }
        outAProcDec2(node);
    }

    public void inAFuncDec2(AFuncDec2 node)
    {
        defaultIn(node);
    }

    public void outAFuncDec2(AFuncDec2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDec2(AFuncDec2 node)
    {
        inAFuncDec2(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        outAFuncDec2(node);
    }

    public void inADecProcedimentoDecProcedimento(ADecProcedimentoDecProcedimento node)
    {
        defaultIn(node);
    }

    public void outADecProcedimentoDecProcedimento(ADecProcedimentoDecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimentoDecProcedimento(ADecProcedimentoDecProcedimento node)
    {
        inADecProcedimentoDecProcedimento(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getParentesesDireito() != null)
        {
            node.getParentesesDireito().apply(this);
        }
        if(node.getMid() != null)
        {
            node.getMid().apply(this);
        }
        if(node.getParentesesEsquerdo() != null)
        {
            node.getParentesesEsquerdo().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getProcedimento() != null)
        {
            node.getProcedimento().apply(this);
        }
        if(node.getPontoDeEntrada() != null)
        {
            node.getPontoDeEntrada().apply(this);
        }
        outADecProcedimentoDecProcedimento(node);
    }

    public void inADecFuncaoDecFuncao(ADecFuncaoDecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoDecFuncao(ADecFuncaoDecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoDecFuncao(ADecFuncaoDecFuncao node)
    {
        inADecFuncaoDecFuncao(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getParentesesDireito() != null)
        {
            node.getParentesesDireito().apply(this);
        }
        if(node.getMid() != null)
        {
            node.getMid().apply(this);
        }
        if(node.getParentesesEsquerdo() != null)
        {
            node.getParentesesEsquerdo().apply(this);
        }
        if(node.getEsqn() != null)
        {
            node.getEsqn().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        outADecFuncaoDecFuncao(node);
    }

    public void inAListaParametroListaParametro(AListaParametroListaParametro node)
    {
        defaultIn(node);
    }

    public void outAListaParametroListaParametro(AListaParametroListaParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaParametroListaParametro(AListaParametroListaParametro node)
    {
        inAListaParametroListaParametro(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAListaParametroListaParametro(node);
    }

    public void inAParametroListaParametro(AParametroListaParametro node)
    {
        defaultIn(node);
    }

    public void outAParametroListaParametro(AParametroListaParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroListaParametro(AParametroListaParametro node)
    {
        inAParametroListaParametro(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParametroListaParametro(node);
    }

    public void inAParametroParametro(AParametroParametro node)
    {
        defaultIn(node);
    }

    public void outAParametroParametro(AParametroParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroParametro(AParametroParametro node)
    {
        inAParametroParametro(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAParametroParametro(node);
    }

    public void inAClasseTipo(AClasseTipo node)
    {
        defaultIn(node);
    }

    public void outAClasseTipo(AClasseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClasseTipo(AClasseTipo node)
    {
        inAClasseTipo(node);
        if(node.getTipoClasse() != null)
        {
            node.getTipoClasse().apply(this);
        }
        outAClasseTipo(node);
    }

    public void inAPrimitivoTipo(APrimitivoTipo node)
    {
        defaultIn(node);
    }

    public void outAPrimitivoTipo(APrimitivoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimitivoTipo(APrimitivoTipo node)
    {
        inAPrimitivoTipo(node);
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        outAPrimitivoTipo(node);
    }

    public void inATipoClasseTipoClasse(ATipoClasseTipoClasse node)
    {
        defaultIn(node);
    }

    public void outATipoClasseTipoClasse(ATipoClasseTipoClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoClasseTipoClasse(ATipoClasseTipoClasse node)
    {
        inATipoClasseTipoClasse(node);
        if(node.getIdClass() != null)
        {
            node.getIdClass().apply(this);
        }
        outATipoClasseTipoClasse(node);
    }

    public void inABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        inABoolTipoPrimitivo(node);
        if(node.getBoleano() != null)
        {
            node.getBoleano().apply(this);
        }
        outABoolTipoPrimitivo(node);
    }

    public void inARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        inARealTipoPrimitivo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipoPrimitivo(node);
    }

    public void inACondComando(ACondComando node)
    {
        defaultIn(node);
    }

    public void outACondComando(ACondComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondComando(ACondComando node)
    {
        inACondComando(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getParentesesDireito() != null)
        {
            node.getParentesesDireito().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getParentesesEsquerdo() != null)
        {
            node.getParentesesEsquerdo().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outACondComando(node);
    }

    public void inACondElseComando(ACondElseComando node)
    {
        defaultIn(node);
    }

    public void outACondElseComando(ACondElseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondElseComando(ACondElseComando node)
    {
        inACondElseComando(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getMid() != null)
        {
            node.getMid().apply(this);
        }
        if(node.getParentesesDireito() != null)
        {
            node.getParentesesDireito().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getParentesesEsquerdo() != null)
        {
            node.getParentesesEsquerdo().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outACondElseComando(node);
    }

    public void inALoopComando(ALoopComando node)
    {
        defaultIn(node);
    }

    public void outALoopComando(ALoopComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopComando(ALoopComando node)
    {
        inALoopComando(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getParentesesDireito() != null)
        {
            node.getParentesesDireito().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getParentesesEsquerdo() != null)
        {
            node.getParentesesEsquerdo().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outALoopComando(node);
    }

    public void inAAtribComando(AAtribComando node)
    {
        defaultIn(node);
    }

    public void outAAtribComando(AAtribComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribComando(AAtribComando node)
    {
        inAAtribComando(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAtribComando(node);
    }

    public void inACallComando(ACallComando node)
    {
        defaultIn(node);
    }

    public void outACallComando(ACallComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallComando(ACallComando node)
    {
        inACallComando(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outACallComando(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoComando(node);
    }

    public void inACondComandoElse(ACondComandoElse node)
    {
        defaultIn(node);
    }

    public void outACondComandoElse(ACondComandoElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondComandoElse(ACondComandoElse node)
    {
        inACondComandoElse(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getMid() != null)
        {
            node.getMid().apply(this);
        }
        if(node.getParentesesDireito() != null)
        {
            node.getParentesesDireito().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getParentesesEsquerdo() != null)
        {
            node.getParentesesEsquerdo().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outACondComandoElse(node);
    }

    public void inALoopComandoElse(ALoopComandoElse node)
    {
        defaultIn(node);
    }

    public void outALoopComandoElse(ALoopComandoElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopComandoElse(ALoopComandoElse node)
    {
        inALoopComandoElse(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getParentesesDireito() != null)
        {
            node.getParentesesDireito().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getParentesesEsquerdo() != null)
        {
            node.getParentesesEsquerdo().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outALoopComandoElse(node);
    }

    public void inAAtribComandoElse(AAtribComandoElse node)
    {
        defaultIn(node);
    }

    public void outAAtribComandoElse(AAtribComandoElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribComandoElse(AAtribComandoElse node)
    {
        inAAtribComandoElse(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAtribComandoElse(node);
    }

    public void inACallComandoElse(ACallComandoElse node)
    {
        defaultIn(node);
    }

    public void outACallComandoElse(ACallComandoElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallComandoElse(ACallComandoElse node)
    {
        inACallComandoElse(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outACallComandoElse(node);
    }

    public void inABlocoComandoElse(ABlocoComandoElse node)
    {
        defaultIn(node);
    }

    public void outABlocoComandoElse(ABlocoComandoElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComandoElse(ABlocoComandoElse node)
    {
        inABlocoComandoElse(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoComandoElse(node);
    }

    public void inAContCondContComandoElse(AContCondContComandoElse node)
    {
        defaultIn(node);
    }

    public void outAContCondContComandoElse(AContCondContComandoElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContCondContComandoElse(AContCondContComandoElse node)
    {
        inAContCondContComandoElse(node);
        if(node.getComandoElse() != null)
        {
            node.getComandoElse().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outAContCondContComandoElse(node);
    }

    public void inAListaComandosListaComandos(AListaComandosListaComandos node)
    {
        defaultIn(node);
    }

    public void outAListaComandosListaComandos(AListaComandosListaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaComandosListaComandos(AListaComandosListaComandos node)
    {
        inAListaComandosListaComandos(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAListaComandosListaComandos(node);
    }

    public void inAComandoListaComandos(AComandoListaComandos node)
    {
        defaultIn(node);
    }

    public void outAComandoListaComandos(AComandoListaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoListaComandos(AComandoListaComandos node)
    {
        inAComandoListaComandos(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoListaComandos(node);
    }

    public void inABlocoBloco(ABlocoBloco node)
    {
        defaultIn(node);
    }

    public void outABlocoBloco(ABlocoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoBloco(ABlocoBloco node)
    {
        inABlocoBloco(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDec> copy = new ArrayList<PDec>(node.getDec());
            Collections.reverse(copy);
            for(PDec e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        outABlocoBloco(node);
    }

    public void inATermoExp(ATermoExp node)
    {
        defaultIn(node);
    }

    public void outATermoExp(ATermoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExp(ATermoExp node)
    {
        inATermoExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoExp(node);
    }

    public void inAAtributoExp(AAtributoExp node)
    {
        defaultIn(node);
    }

    public void outAAtributoExp(AAtributoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributoExp(AAtributoExp node)
    {
        inAAtributoExp(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getAtributo() != null)
        {
            node.getAtributo().apply(this);
        }
        if(node.getIdPonto() != null)
        {
            node.getIdPonto().apply(this);
        }
        outAAtributoExp(node);
    }

    public void inANegativoExp(ANegativoExp node)
    {
        defaultIn(node);
    }

    public void outANegativoExp(ANegativoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativoExp(ANegativoExp node)
    {
        inANegativoExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outANegativoExp(node);
    }

    public void inASomaExp(ASomaExp node)
    {
        defaultIn(node);
    }

    public void outASomaExp(ASomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExp(ASomaExp node)
    {
        inASomaExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outASomaExp(node);
    }

    public void inASubtExp(ASubtExp node)
    {
        defaultIn(node);
    }

    public void outASubtExp(ASubtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtExp(ASubtExp node)
    {
        inASubtExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outASubtExp(node);
    }

    public void inAMultiExp(AMultiExp node)
    {
        defaultIn(node);
    }

    public void outAMultiExp(AMultiExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiExp(AMultiExp node)
    {
        inAMultiExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAMultiExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outADivExp(node);
    }

    public void inAModExp(AModExp node)
    {
        defaultIn(node);
    }

    public void outAModExp(AModExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExp(AModExp node)
    {
        inAModExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAModExp(node);
    }

    public void inAIgualExp(AIgualExp node)
    {
        defaultIn(node);
    }

    public void outAIgualExp(AIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExp(AIgualExp node)
    {
        inAIgualExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAIgualExp(node);
    }

    public void inAMenorExp(AMenorExp node)
    {
        defaultIn(node);
    }

    public void outAMenorExp(AMenorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExp(AMenorExp node)
    {
        inAMenorExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getMenorQ() != null)
        {
            node.getMenorQ().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAMenorExp(node);
    }

    public void inAMenorigExp(AMenorigExp node)
    {
        defaultIn(node);
    }

    public void outAMenorigExp(AMenorigExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorigExp(AMenorigExp node)
    {
        inAMenorigExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAMenorigExp(node);
    }

    public void inANegacExp(ANegacExp node)
    {
        defaultIn(node);
    }

    public void outANegacExp(ANegacExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegacExp(ANegacExp node)
    {
        inANegacExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getNegacao() != null)
        {
            node.getNegacao().apply(this);
        }
        outANegacExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAndExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAOrExp(node);
    }

    public void inABlocoExpExp(ABlocoExpExp node)
    {
        defaultIn(node);
    }

    public void outABlocoExpExp(ABlocoExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpExp(ABlocoExpExp node)
    {
        inABlocoExpExp(node);
        if(node.getBlocoExp() != null)
        {
            node.getBlocoExp().apply(this);
        }
        outABlocoExpExp(node);
    }

    public void inANumeroTermo(ANumeroTermo node)
    {
        defaultIn(node);
    }

    public void outANumeroTermo(ANumeroTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroTermo(ANumeroTermo node)
    {
        inANumeroTermo(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroTermo(node);
    }

    public void inAVerdadeTermo(AVerdadeTermo node)
    {
        defaultIn(node);
    }

    public void outAVerdadeTermo(AVerdadeTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVerdadeTermo(AVerdadeTermo node)
    {
        inAVerdadeTermo(node);
        if(node.getVerdade() != null)
        {
            node.getVerdade().apply(this);
        }
        outAVerdadeTermo(node);
    }

    public void inAFalsoTermo(AFalsoTermo node)
    {
        defaultIn(node);
    }

    public void outAFalsoTermo(AFalsoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalsoTermo(AFalsoTermo node)
    {
        inAFalsoTermo(node);
        if(node.getFalso() != null)
        {
            node.getFalso().apply(this);
        }
        outAFalsoTermo(node);
    }

    public void inAIdTermo(AIdTermo node)
    {
        defaultIn(node);
    }

    public void outAIdTermo(AIdTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdTermo(AIdTermo node)
    {
        inAIdTermo(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdTermo(node);
    }

    public void inAParentesesTermo(AParentesesTermo node)
    {
        defaultIn(node);
    }

    public void outAParentesesTermo(AParentesesTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesTermo(AParentesesTermo node)
    {
        inAParentesesTermo(node);
        if(node.getParentesesDireito() != null)
        {
            node.getParentesesDireito().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParentesesEsquerdo() != null)
        {
            node.getParentesesEsquerdo().apply(this);
        }
        outAParentesesTermo(node);
    }

    public void inAChamadaTermo(AChamadaTermo node)
    {
        defaultIn(node);
    }

    public void outAChamadaTermo(AChamadaTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaTermo(AChamadaTermo node)
    {
        inAChamadaTermo(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getIdPonto() != null)
        {
            node.getIdPonto().apply(this);
        }
        outAChamadaTermo(node);
    }

    public void inAAtributoAtributo(AAtributoAtributo node)
    {
        defaultIn(node);
    }

    public void outAAtributoAtributo(AAtributoAtributo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributoAtributo(AAtributoAtributo node)
    {
        inAAtributoAtributo(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAAtributoAtributo(node);
    }

    public void inAIdPontoIdPonto(AIdPontoIdPonto node)
    {
        defaultIn(node);
    }

    public void outAIdPontoIdPonto(AIdPontoIdPonto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdPontoIdPonto(AIdPontoIdPonto node)
    {
        inAIdPontoIdPonto(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdPontoIdPonto(node);
    }

    public void inABlocoExpBlocoExp(ABlocoExpBlocoExp node)
    {
        defaultIn(node);
    }

    public void outABlocoExpBlocoExp(ABlocoExpBlocoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpBlocoExp(ABlocoExpBlocoExp node)
    {
        inABlocoExpBlocoExp(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PDecCons> copy = new ArrayList<PDecCons>(node.getDecCons());
            Collections.reverse(copy);
            for(PDecCons e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        outABlocoExpBlocoExp(node);
    }

    public void inAChamadaChamada(AChamadaChamada node)
    {
        defaultIn(node);
    }

    public void outAChamadaChamada(AChamadaChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaChamada(AChamadaChamada node)
    {
        inAChamadaChamada(node);
        if(node.getParentesesDireito() != null)
        {
            node.getParentesesDireito().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParentesesEsquerdo() != null)
        {
            node.getParentesesEsquerdo().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAChamadaChamada(node);
    }
}
