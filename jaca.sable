Package jaca;


Helpers
  digito = ['0' .. '9'];
  underline = '_';

  letra_minuscula =  (['a' .. 'z'] | [224 .. 227] | [233 .. 234] | 237 | [243 .. 245] | 250 | 231);
  letra_maiuscula = (['A' .. 'Z'] | [192 .. 195] | [201 .. 202] | [211 .. 213] | 218 | 199);

  identificador_undermeio = (letra_maiuscula | underline | letra_minuscula)+ | (letra_minuscula | underline | letra_maiuscula)+;
  identificador_underfim = (letra_maiuscula | letra_minuscula | underline)+ | ( letra_minuscula | letra_maiuscula | underline)+;
  identificador_pronto = identificador_undermeio | identificador_underfim;

  id_classehelp =  underline (letra_maiuscula | letra_minuscula)+ | underline (letra_minuscula | letra_maiuscula)+;

  espaco = ' ';
  rc = 13;
  nl = 10;
  comentario_bloco = '{'([32..124] | 126 | [128..254] | (10 | 13 | 10 13))*'}';
  comentario_linha = '#'([32..126] | [128..254])* (10 | 13 | 10 13);

  numero_inteiro = digito+;
  numero_real = numero_inteiro ',' numero_inteiro;
  real_cientifico = digito (',' numero_inteiro)? ('e' | 'E') '-'? numero_inteiro;


Tokens
  funcao = 'fun'231 227 'o';
  operador_relacao = '&';
  ponto_e_virgula = ';';
  real = 'real';
  boleano = 'bool';
  verdade = 'verdade';
  falso = 'falso';
  soma = '+';
  menos = '-';
  mult = '*';
  div = '/';
  mod = '%';
  igual = '==';
  menor_q = '<';
  menor_igual = '<=';
  negacao = '!';
  parenteses_esquerdo = '(';
  parenteses_direito = ')';
  inicializacao = ':=';
  virgula = ',';
  classe = 'classe';
	objeto = 'objeto';
	variavel = 'var';
	constante = 'const';
 
	procedimento = 'procedimento';
	inicio = 'in'237'cio';
	fim = 'fim';
	se = 'se';
	senao = 'sen'227'o';
	enquanto = 'enquanto';
	e = 'e';
	ou = 'ou';
	ponto = '.';
	filha_da_classe = 'filha da classe';
	ponto_de_entrada  = '>>>';
 	separador = '|';
 	comentario = comentario_bloco | comentario_linha;
 
	id_class = id_classehelp;
 	identificador = (letra_maiuscula | letra_minuscula)+ | (letra_minuscula | letra_maiuscula)+ | identificador_pronto;

 	numero = numero_real | real_cientifico;
 
  vazio = (espaco | rc | nl)+; 


Ignored Tokens
  vazio, comentario;
 
 
Productions
  programa {-> programa} =
    [esq]:familia? [dir]:lista_classe {-> New programa.a_programa(esq.familia, [dir.def_classe])};

  lista_classe {-> def_classe*} =
    {lista_classe} [esq]:def_classe [dir]:lista_classe {-> [esq.def_classe, dir.def_classe]} |
    {classe} def_classe {-> [def_classe]};

  familia {-> familia} =
    {familia} lista_relacao ponto_e_virgula {-> New familia.a_lista_relacao([lista_relacao.relacao])};
 
  lista_relacao {-> relacao*} =
    {lista_relacao} [esq]:relacao operador_relacao [dir]:lista_relacao {-> [esq.relacao, dir.relacao]} |
    {relacao} relacao {-> [relacao]};
 
 relacao {-> relacao} =
  {relacao} classe [esq]:pcid [dir]:filha_relacao {-> New relacao.a_relacao(esq.pcid, dir.relacao)};

 filha_relacao {-> relacao} =
  {filha_relacao} filha_da_classe pcid {-> New relacao.a_filha_relacao(pcid)};

 def_classe {-> def_classe} =
  {def_classe} classe [nome]:pcid inicio [esq]:atributos? [dir]:metodos? fim {-> New def_classe.a_def_classe(nome.pcid, [esq.dec], [dir.dec2])};

 atributos {-> dec*} =
  {atributos} [esq]:dec [dir]:atributos {-> [esq.dec, dir.dec]} |
  {dec} dec {-> [dec]};

 metodos {-> dec2*} =
  {metodos} [esq]:dec2 [dir]:metodos {-> [esq.dec2, dir.dec2]} |
  {dec} dec2 {-> [dec2]};
  
 dec {-> dec} =
  {obj} dec_obj {-> dec_obj.dec} |
  {var} dec_var {-> dec_var.dec} |
  {cons} dec_cons {-> dec_cons.dec};
  
 lista_decs {-> dec*} =
  {lista_dec} [esq]:dec [dir]:lista_decs {-> [esq.dec, dir.dec]} |
  {dec} dec {-> [dec]};
  
 lista_dec_cons {-> dec*} =
  {lista_dec_cons} [esq]:dec_cons [dir]:lista_dec_cons {-> [esq.dec, dir.dec]}|
  {dec_cons} dec_cons {-> [dec_cons.dec]};
  
 dec_obj {-> dec} =
  {dec_obj} objeto [esq]:pcid [dir]:lista_id ponto_e_virgula {-> New dec.a_dec_obj(esq.pcid, [dir.exp])};
  
 dec_var {-> dec} =
  {dec_var} variavel [esq]:tipo [dir]:lista_id ponto_e_virgula {-> New dec.a_dec_var(esq.tipo, [dir.exp])};
  
 dec_cons {-> dec} =
  {dec_cons} constante [esq]:tipo_primitivo [dir]:lista_inicializacao+ ponto_e_virgula {-> New dec.a_dec_cons(esq.tipo_primitivo, [dir.pinicializacao])};
  
 lista_id {-> exp*} =
  {lista_id} [esq]:identificador virgula [dir]:lista_id {-> [esq.exp, dir.exp]} |
  {id} pid {-> [pid.exp]};
 
 lista_inicializacao {-> pinicializacao*} =
  {lista_inicializacao} [esq]:pinicializacao virgula [dir]:lista_inicializacao {-> [esq.pinicializacao, dir.pinicializacao]} |
  {inicializacao} pinicializacao {-> [pinicializacao]};
  
 pinicializacao {-> pinicializacao} =
  {pinicializacao} [esq]:identificador inicializacao [dir]:exp {-> New pinicializacao.a_pinicializacao(esq.exp, dir.exp)};
  
 pcid =
  {id_class} id_class;
 
 dec2 {-> dec2} =
  {proc} dec_procedimento {-> dec_procedimento.dec2} |
  {func} dec_funcao {-> dec_funcao.dec2};
  
 dec_procedimento {-> dec2} =
  {dec_procedimento} ponto_de_entrada? procedimento [esq]:identificador parenteses_esquerdo [mid]:lista_parametro? parenteses_direito ponto_e_virgula {-> New dec2.a_dec_procedimento(esq.exp, [mid.parametro])}|
  {dec_procedimento_com} ponto_de_entrada? procedimento [esq]:identificador parenteses_esquerdo [mid]:lista_parametro? parenteses_direito [dir]:comando {-> New dec2.a_dec_procedimento(esq.exp, [mid.parametro], dir.comando)};
 
 dec_funcao {-> dec2} =
  {dec_funcao} funcao [esq]:tipo [esqn]:identificador parenteses_esquerdo [mid]:lista_parametro? parenteses_direito ponto_e_virgula {-> New dec2.a_dec_funcao(esq.tipo, esqn.exp, [mid.parametro])} |
  {dec_funcao_com} funcao [esq]:tipo [esqn]:identificador parenteses_esquerdo [mid]:lista_parametro? parenteses_direito [dir]:exp {-> New dec2.a_dec_funcao(esq.tipo, esqn.exp, [mid.parametro], dir.exp)};
 
 lista_parametro {-> parametro*} =
  {lista_parametro} [esq]:parametro separador [dir]:lista_parametro {-> [esq.parametro, dir.parametro]}|
  {parametro} parametro {-> [parametro]};
 
 parametro =
  {parametro} tipo identificador;

 tipo {-> tipo} =
  {classe} tipo_classe {-> New tipo.a_tipo_classe(tipo_classe)} |
  {primitivo} tipo_primitivo {-> New tipo.a_tipo_primtivo(tipo_primitivo)};
 
 tipo_classe =
  {tipo_classe} id_class;
 
	tipo_primitivo =
    	{bool} boleano |
  		{real} real;

 comando {-> comando} =
  {cond} se parenteses_esquerdo [esq]:exp parenteses_direito [dir]:comando {-> New comando.a_cond(esq.exp, dir.comando)}|
  {cond_else} se parenteses_esquerdo [esq]:exp parenteses_direito [mid]:comando_else senao [dir]:comando {-> New comando.a_cond_else(esq.exp, mid.comando, dir.comando)} |
  {loop} enquanto parenteses_esquerdo [esq]:exp parenteses_direito [dir]:comando {-> New comando.a_loop(esq.exp, dir.comando)}|
  {atrib} [esq]:identificador inicializacao [dir]:exp ponto_e_virgula  {-> New comando.a_atrib(esq.exp, dir.exp)}|
  {call} [esq]:id_ponto? [dir]:chamada ponto_e_virgula {-> New comando.a_call(esq.exp, dir.exp)} |
  {bloco} bloco {-> bloco.comando};
 
 comando_else {-> comando} =
  {cond} se parenteses_esquerdo [esq]:exp parenteses_direito [mid]:comando_else [dir]:cont_comando_else {-> New comando.a_cont_cond_else(esq.exp, mid.comando, dir.comando)}|
  {loop} enquanto parenteses_esquerdo [esq]:exp parenteses_direito [dir]:comando_else {-> New comando.a_loop_else(esq.exp, dir.comando)}|
  {atrib} [esq]:identificador inicializacao [dir]:exp ponto_e_virgula {-> New comando.a_atrib_else(esq.exp, dir.exp)} |
  {call} [esq]:id_ponto? [dir]:chamada ponto_e_virgula {-> New comando.a_call_else(esq.exp, dir.exp)} |
  {bloco} bloco {-> bloco.comando};
 
 cont_comando_else  {-> comando}=
  {cont_cond} senao comando_else {-> comando_else.comando};
  
  pid {-> exp} =
	  {id} identificador {-> New exp.a_id(identificador)};
  
  lista_comandos  {-> comando*} =
    {lista_comandos} [esq]:comando [dir]:lista_comandos {-> [esq.comando, dir.comando]} |
    {comando} comando {-> [comando]};
  
    bloco {-> comando} = {bloco} inicio dec* comando* fim  {-> New comando.a_bloco([esq.dec], [dir.comando])};
 
	exp {-> exp} =
		{termo} termo {-> termo.exp} |
    {negativo} menos exp {-> New exp.a_negativo(exp)} |
    {soma} [esq]:termo soma [dir]:exp {-> New exp.a_soma(esq.exp, dir.exp)}|
    {subt} [esq]:termo menos [dir]:exp {-> New exp.a_subt(esq.exp, dir.exp)} |
    {multi} [esq]:termo mult [dir]:exp {-> New exp.a_multi(esq.exp, dir.exp)} |
    {div} [esq]:termo div [dir]:exp {-> New exp.a_div(esq.exp, dir.exp)} |
    {mod} [esq]:termo mod [dir]:exp {-> New exp.a_mod(esq.exp, dir.exp)} |
    {igual} [esq]:termo igual [dir]:exp {-> New exp.a_igual(esq.exp, dir.exp)} |
    {menor} [esq]:termo menor_q [dir]:exp {-> New exp.a_menor(esq.exp, dir.exp)} |
    {menorig} [esq]:termo menor_igual [dir]:exp {-> New exp.a_menor_igual(esq.exp, dir.exp)}|
    {negacao} negacao exp {-> New exp.a_negacao(exp)} |
    {and} [esq]:termo e [dir]:exp {-> New exp.a_and(esq.exp, dir.exp)} | 
    {or} [esq]:termo ou [dir]:exp {-> New exp.a_or(esq.exp, dir.exp)} |
    {bloco_exp} bloco_exp;
	
	termo {-> exp} = 
		{numero} numero {-> New exp.a_numero(numero)} |
		{verdade} verdade {-> New exp.a_true(verdade)} |
		{falso} falso {-> New exp.a_false(falso)}|
		{parenteses} parenteses_esquerdo exp parenteses_direito {-> exp.exp} |
		{valor} valor {-> valor.exp};
	
	valor {-> exp} =
		{id} identificador {-> New exp.a_id(identificador)} |
		{atributo} [esq]:id_ponto [dir]:identificador {-> New exp.a_id_atrib(esq.exp, dir.exp)} |
		{chamada} [esq]:id_ponto? [dir]:chamada {-> New exp.a_id_call(esq.exp, dir.exp)};
		 
	chamada {-> exp} =
		{chamada} identificador parenteses_esquerdo lista_exp? parenteses_direito |
    {-> New exp.a_chamada(identificador.exp, [lista_exp.exp])};
		
	id_ponto {-> exp} = 
		{id_ponto} identificador ponto {-> New exp.a_id(identificador)};
	
	bloco_exp {-> exp} = 
		{bloco_exp} inicio dec_cons* exp fim {-> New exp.a_bloco_exp([esq.dec], dir.exp)};
	
	lista_exp {-> exp*} =
		{lista_exp} exp separador lista_exp  {-> [esq.exp, dir.exp]} |
		{exp} exp {-> [exp]};


Abstract Syntax Tree
    programa =
      {a_programa} [esq]:familia? [dir]:def_classe+;

    familia =
      {a_lista_relacao} relacao+;
    relacao =
      {a_relacao} [esq]:pcid [dir]:relacao |
      {a_filha_relacao} pcid;

    def_classe =
      {a_def_classe} [nome]:pcid [esq]:dec* [dir]:dec2*;

    dec =
      {a_dec_obj} [esq]:pcid [dir]:exp+ |
      {a_dec_var} [esq]:tipo [dir]:exp+ |
      {a_dec_cons} [esq]:tipo_primitivo [dir]:pinicializacao+;
    pinicializacao =
      {a_pinicializacao} [esq]:exp [dir]:exp;
    pcid =
      {id_class} id_class;

    dec2 =
      {a_dec_procedimento} [esq]:exp [mid]:parametro* [dir]:comando |
      {a_dec_funcao} [esq]:tipo [esqn]:exp [mid]:parametro* [dir]:exp;
    parametro =
      {parametro} tipo identificador;

    tipo =
      {a_tipo_classe} tipo_classe |
      {a_tipo_primtivo} tipo_primitivo;
    tipo_classe =
      {tipo_classe} id_class;
    tipo_primitivo =
      {bool} boleano |
      {real} real;

  comando =
    {a_cond} [esq]:exp [dir]:comando |
    {a_cond_else} [esq]:exp [mid]:comando [dir]:comando |
    {a_cont_cond_else} [esq]:exp [mid]:comando [dir]:comando |
    {a_loop} [esq]:exp [dir]:comando |
    {a_atrib} [esq]:exp [dir]:exp |
    {a_call} [esq]:exp? [dir]:exp |
    {a_bloco} [esq]:dec* [dir]:comando* |
    {a_loop_else} [esq]:exp [dir]:comando |
    {a_atrib_else} [esq]:exp [dir]:exp |
    {a_call_else} [esq]:exp? [dir]:exp;

	exp =
      {a_se_cond} [esq]:exp [dir]:exp |
      {a_entao_cond} [esq]:exp [dir]:exp |
      {a_senao_cond} exp |
      {a_soma} [esq]:exp [dir]:exp |
      {a_subt} [esq]:exp [dir]:exp |
      {a_multi} [esq]:exp [dir]:exp |
      {a_div} [esq]:exp [dir]:exp |
      {a_mod} [esq]:exp [dir]:exp |
      {a_igual} [esq]:exp [dir]:exp |
      {a_menor} [esq]:exp [dir]:exp |
      {a_menor_igual} [esq]:exp [dir]:exp |
      {a_bloco_exp} [esq]:dec* [dir]:exp |
      {a_negativo} exp |
      {a_negacao} exp |
      {a_and} [esq]:exp [dir]:exp |
      {a_or} [esq]:exp [dir]:exp |
      {a_id} identificador |
      {a_id_atrib} [esq]:exp? [dir]:exp |
      {a_id_call} [esq]:exp? [dir]:exp |
      {a_chamada} [esq]:exp [dir]:exp* |
      {a_numero} numero |
      {a_true} verdade |
      {a_false} falso;
